{"version":3,"sources":["common/Section/Section.module.css","components/ContactForm/ContactForm.module.css","components/Filter/Filter.module.css","components/ContactListItem/ContactListItem.module.css","components/ContactList/ContactList.module.css","common/Section/Section.js","components/ContactForm/ContactFormFormik.js","components/ContactForm/ContactFormContainer.js","components/Filter/Filter.js","components/Filter/FilterContainer.js","components/ContactListItem/ContactListItem.js","components/ContactListItem/ContactListItemContainer.js","components/ContactList/ContactList.js","components/ContactList/ContactListContainer.js","views/Contacts/Contacts.js"],"names":["module","exports","Section","title","children","error","className","styles","section","ContactForm","addContact","initialValues","name","number","validationSchema","Yup","min","max","required","onSubmit","values","form","htmlFor","label","type","input","Button","variant","color","mapDispatchToProps","showNotif","contactsActions","addContactError","contactsOperations","connect","state","contacts","contactsSelectors","getContacts","Filter","filter","onChangeFilter","length","value","onChange","e","target","filterContacts","getFilter","ContactListItem","id","onClickDelete","key","item","onClick","ownProps","getContactById","dispatch","deleteContact","ContactList","isLoading","isChecked","useEffect","Spinner","list","list__dark","list__light","map","getVisibleContacts","getLoading","withAuth"],"mappings":"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","file":"static/js/contacts-page.d35f91b8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__3OmnZ\",\"title\":\"Section_title__U7g7N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__2EwPp\",\"label\":\"ContactForm_label__3Jmgt\",\"input\":\"ContactForm_input__2S3HO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__3wITp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ContactListItem_item__1rWjR\",\"name\":\"ContactListItem_name__3h7T4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__3LD1X\",\"list__light\":\"ContactList_list__light__Ic7Oi\",\"list__dark\":\"ContactList_list__dark__KH77g\"};","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./Section.module.css\";\r\n\r\nfunction Section({ title, children, error }) {\r\n  return (\r\n    <section className={styles.section}>\r\n      {title && <h2 className={styles.title}>{title}</h2>}\r\n      {children}\r\n    </section>\r\n  );\r\n}\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default Section;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\r\nimport styles from \"./ContactForm.module.css\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport * as Yup from \"yup\";\r\n\r\nfunction ContactForm({ addContact }) {\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        name: \"\",\r\n        number: \"\",\r\n      }}\r\n      validationSchema={Yup.object({\r\n        name: Yup.string()\r\n          .min(2, \"Must be 2 characters or more\")\r\n          .max(15, \"Must be 15 characters or less\")\r\n          .required(\"Required\"),\r\n        number: Yup.string()\r\n          .min(10, \"Must be 10 characters or more\")\r\n          .max(15, \"Must be 15 characters or less\")\r\n          .required(\"Required\"),\r\n      })}\r\n      onSubmit={(values) => {\r\n        addContact(values);\r\n      }}\r\n    >\r\n      <Form className={styles.form}>\r\n        <label htmlFor=\"name\" className={styles.label}>\r\n          Name\r\n        </label>\r\n        <Field name=\"name\" type=\"text\" className={styles.input} />\r\n        <ErrorMessage name=\"name\" />\r\n        <label htmlFor=\"number\" className={styles.label}>\r\n          Number\r\n        </label>\r\n        <Field name=\"number\" type=\"text\" className={styles.input} />\r\n        <ErrorMessage name=\"number\" />\r\n\r\n        <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n    </Formik>\r\n  );\r\n}\r\n\r\nContactForm.propTypes = {\r\n  addContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactForm;\r\n","import { connect } from \"react-redux\";\r\nimport {\r\n  contactsSelectors,\r\n  contactsActions,\r\n  contactsOperations,\r\n} from \"../../modules/contacts\";\r\n// import ContactForm from \"./ContactForm\";\r\nimport ContactForm from \"./ContactFormFormik\";\r\n\r\nconst mapStateToProps = (state) => ({\r\n  contacts: contactsSelectors.getContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  showNotif: contactsActions.addContactError,\r\n  addContact: contactsOperations.addContact,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n","import React from \"react\";\r\nimport styles from \"./Filter.module.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction Filter({ contacts, filter, onChangeFilter }) {\r\n  return (\r\n    <>\r\n      {contacts.length > 1 && (\r\n        <label className={styles.label}>\r\n          Find contact by name\r\n          <input\r\n            type=\"text\"\r\n            value={filter}\r\n            onChange={(e) => onChangeFilter(e.target.value)}\r\n            className={styles.input}\r\n          />\r\n        </label>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nFilter.propTypes = {\r\n  filter: PropTypes.string.isRequired,\r\n  onChangeFilter: PropTypes.func.isRequired,\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    })\r\n  ).isRequired,\r\n};\r\nexport default Filter;\r\n","import { connect } from \"react-redux\";\r\nimport { contactsActions, contactsSelectors } from \"../../modules/contacts\";\r\nimport Filter from \"./Filter\";\r\n\r\nconst mapStateToProps = (state) => ({\r\n  contacts: contactsSelectors.getContacts(state),\r\n  filter: contactsSelectors.getFilter(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  onChangeFilter: contactsActions.filterContacts,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport styles from \"./ContactListItem.module.css\";\r\n\r\nfunction ContactListItem({ id, name, number, onClickDelete }) {\r\n  return (\r\n    <li key={id} className={styles.item}>\r\n      <span className={styles.name}>{name}: </span>\r\n      <span>{number}</span>\r\n      <Button\r\n        type=\"button\"\r\n        onClick={onClickDelete}\r\n        variant=\"contained\"\r\n        color=\"secondary\"\r\n      >\r\n        delete\r\n      </Button>\r\n    </li>\r\n  );\r\n}\r\nContactListItem.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n  onClickDelete: PropTypes.func.isRequired,\r\n};\r\nexport default ContactListItem;\r\n","import { connect } from \"react-redux\";\r\nimport { contactsOperations, contactsSelectors } from \"../../modules/contacts\";\r\nimport ContactListItem from \"./ContactListItem\";\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  const item = contactsSelectors.getContactById(state, ownProps.id);\r\n  return { ...item };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => ({\r\n  onClickDelete: () => dispatch(contactsOperations.deleteContact(ownProps.id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactListItem);\r\n","import React, { useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport Spinner from \"../../common/Spinner/Spinner\";\r\nimport ContactListItem from \"../ContactListItem/ContactListItemContainer\";\r\n\r\nimport styles from \"./ContactList.module.css\";\r\n\r\nfunction ContactList({ contacts, isLoading, isChecked, getContacts }) {\r\n  useEffect(() => {\r\n    if (contacts.length > 0) {\r\n      return;\r\n    }\r\n    getContacts();\r\n  }, [getContacts, contacts.length]);\r\n  return (\r\n    <>\r\n      {isLoading && <Spinner />}\r\n      {contacts.length > 0 && (\r\n        <ul\r\n          className={`${styles.list} ${\r\n            isChecked ? styles.list__dark : styles.list__light\r\n          }`}\r\n        >\r\n          {contacts.map(({ id }) => (\r\n            <ContactListItem key={id} id={id} />\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    })\r\n  ).isRequired,\r\n\r\n  isLoading: PropTypes.bool.isRequired,\r\n  isChecked: PropTypes.bool.isRequired,\r\n  getContacts: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactList;\r\n","import { connect } from \"react-redux\";\r\n\r\nimport { contactsSelectors, contactsOperations } from \"../../modules/contacts\";\r\nimport ContactList from \"./ContactList\";\r\n\r\nconst mapStateToProps = (state) => ({\r\n  contacts: contactsSelectors.getVisibleContacts(state),\r\n  isLoading: contactsSelectors.getLoading(state),\r\n});\r\nconst mapDispatchToProps = {\r\n  getContacts: contactsOperations.getContacts,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React from \"react\";\r\nimport Section from \"../../common/Section/Section\";\r\nimport ContactForm from \"../../components/ContactForm/ContactFormContainer\";\r\nimport Filter from \"../../components/Filter/FilterContainer\";\r\nimport ContactList from \"../../components/ContactList/ContactListContainer\";\r\nimport withAuth from \"../../components/hoc/withAuth\";\r\n\r\nfunction Contacts() {\r\n  return (\r\n    <div>\r\n      <Section title=\"Phonebook\">\r\n        <ContactForm />\r\n      </Section>\r\n      <Section title=\"Contacts\">\r\n        <Filter />\r\n        <ContactList />\r\n      </Section>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withAuth(Contacts);\r\n"],"sourceRoot":""}